// Code generated by mockery v2.39.1. DO NOT EDIT.

package bigquery

import (
	mock "github.com/stretchr/testify/mock"
	v2 "google.golang.org/api/bigquery/v2"
)

// MockBigQueryRowAccessPoliciesService is an autogenerated mock type for the BigQueryRowAccessPoliciesService type
type MockBigQueryRowAccessPoliciesService struct {
	mock.Mock
}

type MockBigQueryRowAccessPoliciesService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockBigQueryRowAccessPoliciesService) EXPECT() *MockBigQueryRowAccessPoliciesService_Expecter {
	return &MockBigQueryRowAccessPoliciesService_Expecter{mock: &_m.Mock}
}

// GetIamPolicy provides a mock function with given fields: resource, getiampolicyrequest
func (_m *MockBigQueryRowAccessPoliciesService) GetIamPolicy(resource string, getiampolicyrequest *v2.GetIamPolicyRequest) *v2.RowAccessPoliciesGetIamPolicyCall {
	ret := _m.Called(resource, getiampolicyrequest)

	if len(ret) == 0 {
		panic("no return value specified for GetIamPolicy")
	}

	var r0 *v2.RowAccessPoliciesGetIamPolicyCall
	if rf, ok := ret.Get(0).(func(string, *v2.GetIamPolicyRequest) *v2.RowAccessPoliciesGetIamPolicyCall); ok {
		r0 = rf(resource, getiampolicyrequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v2.RowAccessPoliciesGetIamPolicyCall)
		}
	}

	return r0
}

// MockBigQueryRowAccessPoliciesService_GetIamPolicy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetIamPolicy'
type MockBigQueryRowAccessPoliciesService_GetIamPolicy_Call struct {
	*mock.Call
}

// GetIamPolicy is a helper method to define mock.On call
//   - resource string
//   - getiampolicyrequest *v2.GetIamPolicyRequest
func (_e *MockBigQueryRowAccessPoliciesService_Expecter) GetIamPolicy(resource interface{}, getiampolicyrequest interface{}) *MockBigQueryRowAccessPoliciesService_GetIamPolicy_Call {
	return &MockBigQueryRowAccessPoliciesService_GetIamPolicy_Call{Call: _e.mock.On("GetIamPolicy", resource, getiampolicyrequest)}
}

func (_c *MockBigQueryRowAccessPoliciesService_GetIamPolicy_Call) Run(run func(resource string, getiampolicyrequest *v2.GetIamPolicyRequest)) *MockBigQueryRowAccessPoliciesService_GetIamPolicy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(*v2.GetIamPolicyRequest))
	})
	return _c
}

func (_c *MockBigQueryRowAccessPoliciesService_GetIamPolicy_Call) Return(_a0 *v2.RowAccessPoliciesGetIamPolicyCall) *MockBigQueryRowAccessPoliciesService_GetIamPolicy_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockBigQueryRowAccessPoliciesService_GetIamPolicy_Call) RunAndReturn(run func(string, *v2.GetIamPolicyRequest) *v2.RowAccessPoliciesGetIamPolicyCall) *MockBigQueryRowAccessPoliciesService_GetIamPolicy_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function with given fields: projectId, datasetId, tableId
func (_m *MockBigQueryRowAccessPoliciesService) List(projectId string, datasetId string, tableId string) *v2.RowAccessPoliciesListCall {
	ret := _m.Called(projectId, datasetId, tableId)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 *v2.RowAccessPoliciesListCall
	if rf, ok := ret.Get(0).(func(string, string, string) *v2.RowAccessPoliciesListCall); ok {
		r0 = rf(projectId, datasetId, tableId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v2.RowAccessPoliciesListCall)
		}
	}

	return r0
}

// MockBigQueryRowAccessPoliciesService_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type MockBigQueryRowAccessPoliciesService_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - projectId string
//   - datasetId string
//   - tableId string
func (_e *MockBigQueryRowAccessPoliciesService_Expecter) List(projectId interface{}, datasetId interface{}, tableId interface{}) *MockBigQueryRowAccessPoliciesService_List_Call {
	return &MockBigQueryRowAccessPoliciesService_List_Call{Call: _e.mock.On("List", projectId, datasetId, tableId)}
}

func (_c *MockBigQueryRowAccessPoliciesService_List_Call) Run(run func(projectId string, datasetId string, tableId string)) *MockBigQueryRowAccessPoliciesService_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockBigQueryRowAccessPoliciesService_List_Call) Return(_a0 *v2.RowAccessPoliciesListCall) *MockBigQueryRowAccessPoliciesService_List_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockBigQueryRowAccessPoliciesService_List_Call) RunAndReturn(run func(string, string, string) *v2.RowAccessPoliciesListCall) *MockBigQueryRowAccessPoliciesService_List_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockBigQueryRowAccessPoliciesService creates a new instance of MockBigQueryRowAccessPoliciesService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockBigQueryRowAccessPoliciesService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockBigQueryRowAccessPoliciesService {
	mock := &MockBigQueryRowAccessPoliciesService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
