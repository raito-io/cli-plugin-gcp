// Code generated by mockery v2.38.0. DO NOT EDIT.

package bigquery

import (
	context "context"

	org "github.com/raito-io/cli-plugin-gcp/internal/org"
	mock "github.com/stretchr/testify/mock"

	v2 "google.golang.org/api/bigquery/v2"
)

// mockFilteringRepository is an autogenerated mock type for the filteringRepository type
type mockFilteringRepository struct {
	mock.Mock
}

type mockFilteringRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *mockFilteringRepository) EXPECT() *mockFilteringRepository_Expecter {
	return &mockFilteringRepository_Expecter{mock: &_m.Mock}
}

// CreateOrUpdateFilter provides a mock function with given fields: ctx, filter
func (_m *mockFilteringRepository) CreateOrUpdateFilter(ctx context.Context, filter *BQFilter) error {
	ret := _m.Called(ctx, filter)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrUpdateFilter")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *BQFilter) error); ok {
		r0 = rf(ctx, filter)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockFilteringRepository_CreateOrUpdateFilter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateOrUpdateFilter'
type mockFilteringRepository_CreateOrUpdateFilter_Call struct {
	*mock.Call
}

// CreateOrUpdateFilter is a helper method to define mock.On call
//   - ctx context.Context
//   - filter *BQFilter
func (_e *mockFilteringRepository_Expecter) CreateOrUpdateFilter(ctx interface{}, filter interface{}) *mockFilteringRepository_CreateOrUpdateFilter_Call {
	return &mockFilteringRepository_CreateOrUpdateFilter_Call{Call: _e.mock.On("CreateOrUpdateFilter", ctx, filter)}
}

func (_c *mockFilteringRepository_CreateOrUpdateFilter_Call) Run(run func(ctx context.Context, filter *BQFilter)) *mockFilteringRepository_CreateOrUpdateFilter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*BQFilter))
	})
	return _c
}

func (_c *mockFilteringRepository_CreateOrUpdateFilter_Call) Return(_a0 error) *mockFilteringRepository_CreateOrUpdateFilter_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockFilteringRepository_CreateOrUpdateFilter_Call) RunAndReturn(run func(context.Context, *BQFilter) error) *mockFilteringRepository_CreateOrUpdateFilter_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteFilter provides a mock function with given fields: ctx, table, filterName
func (_m *mockFilteringRepository) DeleteFilter(ctx context.Context, table *BQReferencedTable, filterName string) error {
	ret := _m.Called(ctx, table, filterName)

	if len(ret) == 0 {
		panic("no return value specified for DeleteFilter")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *BQReferencedTable, string) error); ok {
		r0 = rf(ctx, table, filterName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockFilteringRepository_DeleteFilter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteFilter'
type mockFilteringRepository_DeleteFilter_Call struct {
	*mock.Call
}

// DeleteFilter is a helper method to define mock.On call
//   - ctx context.Context
//   - table *BQReferencedTable
//   - filterName string
func (_e *mockFilteringRepository_Expecter) DeleteFilter(ctx interface{}, table interface{}, filterName interface{}) *mockFilteringRepository_DeleteFilter_Call {
	return &mockFilteringRepository_DeleteFilter_Call{Call: _e.mock.On("DeleteFilter", ctx, table, filterName)}
}

func (_c *mockFilteringRepository_DeleteFilter_Call) Run(run func(ctx context.Context, table *BQReferencedTable, filterName string)) *mockFilteringRepository_DeleteFilter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*BQReferencedTable), args[2].(string))
	})
	return _c
}

func (_c *mockFilteringRepository_DeleteFilter_Call) Return(_a0 error) *mockFilteringRepository_DeleteFilter_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockFilteringRepository_DeleteFilter_Call) RunAndReturn(run func(context.Context, *BQReferencedTable, string) error) *mockFilteringRepository_DeleteFilter_Call {
	_c.Call.Return(run)
	return _c
}

// ListFilters provides a mock function with given fields: ctx, table, fn
func (_m *mockFilteringRepository) ListFilters(ctx context.Context, table *org.GcpOrgEntity, fn func(context.Context, *v2.RowAccessPolicy, []string, []string, bool) error) error {
	ret := _m.Called(ctx, table, fn)

	if len(ret) == 0 {
		panic("no return value specified for ListFilters")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *org.GcpOrgEntity, func(context.Context, *v2.RowAccessPolicy, []string, []string, bool) error) error); ok {
		r0 = rf(ctx, table, fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockFilteringRepository_ListFilters_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListFilters'
type mockFilteringRepository_ListFilters_Call struct {
	*mock.Call
}

// ListFilters is a helper method to define mock.On call
//   - ctx context.Context
//   - table *org.GcpOrgEntity
//   - fn func(context.Context , *v2.RowAccessPolicy , []string , []string , bool) error
func (_e *mockFilteringRepository_Expecter) ListFilters(ctx interface{}, table interface{}, fn interface{}) *mockFilteringRepository_ListFilters_Call {
	return &mockFilteringRepository_ListFilters_Call{Call: _e.mock.On("ListFilters", ctx, table, fn)}
}

func (_c *mockFilteringRepository_ListFilters_Call) Run(run func(ctx context.Context, table *org.GcpOrgEntity, fn func(context.Context, *v2.RowAccessPolicy, []string, []string, bool) error)) *mockFilteringRepository_ListFilters_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*org.GcpOrgEntity), args[2].(func(context.Context, *v2.RowAccessPolicy, []string, []string, bool) error))
	})
	return _c
}

func (_c *mockFilteringRepository_ListFilters_Call) Return(_a0 error) *mockFilteringRepository_ListFilters_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockFilteringRepository_ListFilters_Call) RunAndReturn(run func(context.Context, *org.GcpOrgEntity, func(context.Context, *v2.RowAccessPolicy, []string, []string, bool) error) error) *mockFilteringRepository_ListFilters_Call {
	_c.Call.Return(run)
	return _c
}

// newMockFilteringRepository creates a new instance of mockFilteringRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockFilteringRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockFilteringRepository {
	mock := &mockFilteringRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
