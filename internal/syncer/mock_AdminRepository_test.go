// Code generated by mockery v2.40.1. DO NOT EDIT.

package syncer

import (
	context "context"

	iam "github.com/raito-io/cli-plugin-gcp/internal/iam"
	mock "github.com/stretchr/testify/mock"
)

// MockAdminRepository is an autogenerated mock type for the AdminRepository type
type MockAdminRepository struct {
	mock.Mock
}

type MockAdminRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAdminRepository) EXPECT() *MockAdminRepository_Expecter {
	return &MockAdminRepository_Expecter{mock: &_m.Mock}
}

// GetGroups provides a mock function with given fields: ctx, fn
func (_m *MockAdminRepository) GetGroups(ctx context.Context, fn func(context.Context, *iam.GroupEntity) error) error {
	ret := _m.Called(ctx, fn)

	if len(ret) == 0 {
		panic("no return value specified for GetGroups")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, func(context.Context, *iam.GroupEntity) error) error); ok {
		r0 = rf(ctx, fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAdminRepository_GetGroups_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGroups'
type MockAdminRepository_GetGroups_Call struct {
	*mock.Call
}

// GetGroups is a helper method to define mock.On call
//   - ctx context.Context
//   - fn func(context.Context , *iam.GroupEntity) error
func (_e *MockAdminRepository_Expecter) GetGroups(ctx interface{}, fn interface{}) *MockAdminRepository_GetGroups_Call {
	return &MockAdminRepository_GetGroups_Call{Call: _e.mock.On("GetGroups", ctx, fn)}
}

func (_c *MockAdminRepository_GetGroups_Call) Run(run func(ctx context.Context, fn func(context.Context, *iam.GroupEntity) error)) *MockAdminRepository_GetGroups_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(func(context.Context, *iam.GroupEntity) error))
	})
	return _c
}

func (_c *MockAdminRepository_GetGroups_Call) Return(_a0 error) *MockAdminRepository_GetGroups_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAdminRepository_GetGroups_Call) RunAndReturn(run func(context.Context, func(context.Context, *iam.GroupEntity) error) error) *MockAdminRepository_GetGroups_Call {
	_c.Call.Return(run)
	return _c
}

// GetUsers provides a mock function with given fields: ctx, fn
func (_m *MockAdminRepository) GetUsers(ctx context.Context, fn func(context.Context, *iam.UserEntity) error) error {
	ret := _m.Called(ctx, fn)

	if len(ret) == 0 {
		panic("no return value specified for GetUsers")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, func(context.Context, *iam.UserEntity) error) error); ok {
		r0 = rf(ctx, fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAdminRepository_GetUsers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUsers'
type MockAdminRepository_GetUsers_Call struct {
	*mock.Call
}

// GetUsers is a helper method to define mock.On call
//   - ctx context.Context
//   - fn func(context.Context , *iam.UserEntity) error
func (_e *MockAdminRepository_Expecter) GetUsers(ctx interface{}, fn interface{}) *MockAdminRepository_GetUsers_Call {
	return &MockAdminRepository_GetUsers_Call{Call: _e.mock.On("GetUsers", ctx, fn)}
}

func (_c *MockAdminRepository_GetUsers_Call) Run(run func(ctx context.Context, fn func(context.Context, *iam.UserEntity) error)) *MockAdminRepository_GetUsers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(func(context.Context, *iam.UserEntity) error))
	})
	return _c
}

func (_c *MockAdminRepository_GetUsers_Call) Return(_a0 error) *MockAdminRepository_GetUsers_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAdminRepository_GetUsers_Call) RunAndReturn(run func(context.Context, func(context.Context, *iam.UserEntity) error) error) *MockAdminRepository_GetUsers_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockAdminRepository creates a new instance of MockAdminRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAdminRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAdminRepository {
	mock := &MockAdminRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
