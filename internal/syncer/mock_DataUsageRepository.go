// Code generated by mockery v2.36.1. DO NOT EDIT.

package syncer

import (
	context "context"

	bigquery "github.com/raito-io/cli-plugin-gcp/internal/bq"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// MockDataUsageRepository is an autogenerated mock type for the DataUsageRepository type
type MockDataUsageRepository struct {
	mock.Mock
}

type MockDataUsageRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDataUsageRepository) EXPECT() *MockDataUsageRepository_Expecter {
	return &MockDataUsageRepository_Expecter{mock: &_m.Mock}
}

// GetDataUsage provides a mock function with given fields: ctx, windowStart, usageFirstUsed, usageLastUsed, fn
func (_m *MockDataUsageRepository) GetDataUsage(ctx context.Context, windowStart *time.Time, usageFirstUsed *time.Time, usageLastUsed *time.Time, fn func(context.Context, *bigquery.BQInformationSchemaEntity) error) error {
	ret := _m.Called(ctx, windowStart, usageFirstUsed, usageLastUsed, fn)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *time.Time, *time.Time, *time.Time, func(context.Context, *bigquery.BQInformationSchemaEntity) error) error); ok {
		r0 = rf(ctx, windowStart, usageFirstUsed, usageLastUsed, fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDataUsageRepository_GetDataUsage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDataUsage'
type MockDataUsageRepository_GetDataUsage_Call struct {
	*mock.Call
}

// GetDataUsage is a helper method to define mock.On call
//   - ctx context.Context
//   - windowStart *time.Time
//   - usageFirstUsed *time.Time
//   - usageLastUsed *time.Time
//   - fn func(context.Context , *bigquery.BQInformationSchemaEntity) error
func (_e *MockDataUsageRepository_Expecter) GetDataUsage(ctx interface{}, windowStart interface{}, usageFirstUsed interface{}, usageLastUsed interface{}, fn interface{}) *MockDataUsageRepository_GetDataUsage_Call {
	return &MockDataUsageRepository_GetDataUsage_Call{Call: _e.mock.On("GetDataUsage", ctx, windowStart, usageFirstUsed, usageLastUsed, fn)}
}

func (_c *MockDataUsageRepository_GetDataUsage_Call) Run(run func(ctx context.Context, windowStart *time.Time, usageFirstUsed *time.Time, usageLastUsed *time.Time, fn func(context.Context, *bigquery.BQInformationSchemaEntity) error)) *MockDataUsageRepository_GetDataUsage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*time.Time), args[2].(*time.Time), args[3].(*time.Time), args[4].(func(context.Context, *bigquery.BQInformationSchemaEntity) error))
	})
	return _c
}

func (_c *MockDataUsageRepository_GetDataUsage_Call) Return(_a0 error) *MockDataUsageRepository_GetDataUsage_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDataUsageRepository_GetDataUsage_Call) RunAndReturn(run func(context.Context, *time.Time, *time.Time, *time.Time, func(context.Context, *bigquery.BQInformationSchemaEntity) error) error) *MockDataUsageRepository_GetDataUsage_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockDataUsageRepository creates a new instance of MockDataUsageRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDataUsageRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDataUsageRepository {
	mock := &MockDataUsageRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
