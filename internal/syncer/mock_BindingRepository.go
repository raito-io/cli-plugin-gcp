// Code generated by mockery v2.36.1. DO NOT EDIT.

package syncer

import (
	context "context"

	iam "github.com/raito-io/cli-plugin-gcp/internal/iam"
	mock "github.com/stretchr/testify/mock"

	org "github.com/raito-io/cli-plugin-gcp/internal/org"
)

// MockBindingRepository is an autogenerated mock type for the BindingRepository type
type MockBindingRepository struct {
	mock.Mock
}

type MockBindingRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockBindingRepository) EXPECT() *MockBindingRepository_Expecter {
	return &MockBindingRepository_Expecter{mock: &_m.Mock}
}

// AddBinding provides a mock function with given fields: ctx, binding
func (_m *MockBindingRepository) AddBinding(ctx context.Context, binding *iam.IamBinding) error {
	ret := _m.Called(ctx, binding)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *iam.IamBinding) error); ok {
		r0 = rf(ctx, binding)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockBindingRepository_AddBinding_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddBinding'
type MockBindingRepository_AddBinding_Call struct {
	*mock.Call
}

// AddBinding is a helper method to define mock.On call
//   - ctx context.Context
//   - binding *iam.IamBinding
func (_e *MockBindingRepository_Expecter) AddBinding(ctx interface{}, binding interface{}) *MockBindingRepository_AddBinding_Call {
	return &MockBindingRepository_AddBinding_Call{Call: _e.mock.On("AddBinding", ctx, binding)}
}

func (_c *MockBindingRepository_AddBinding_Call) Run(run func(ctx context.Context, binding *iam.IamBinding)) *MockBindingRepository_AddBinding_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*iam.IamBinding))
	})
	return _c
}

func (_c *MockBindingRepository_AddBinding_Call) Return(_a0 error) *MockBindingRepository_AddBinding_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockBindingRepository_AddBinding_Call) RunAndReturn(run func(context.Context, *iam.IamBinding) error) *MockBindingRepository_AddBinding_Call {
	_c.Call.Return(run)
	return _c
}

// Bindings provides a mock function with given fields: ctx, fn
func (_m *MockBindingRepository) Bindings(ctx context.Context, fn func(context.Context, *org.GcpOrgEntity, []iam.IamBinding) error) error {
	ret := _m.Called(ctx, fn)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, func(context.Context, *org.GcpOrgEntity, []iam.IamBinding) error) error); ok {
		r0 = rf(ctx, fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockBindingRepository_Bindings_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Bindings'
type MockBindingRepository_Bindings_Call struct {
	*mock.Call
}

// Bindings is a helper method to define mock.On call
//   - ctx context.Context
//   - fn func(context.Context , *org.GcpOrgEntity , []iam.IamBinding) error
func (_e *MockBindingRepository_Expecter) Bindings(ctx interface{}, fn interface{}) *MockBindingRepository_Bindings_Call {
	return &MockBindingRepository_Bindings_Call{Call: _e.mock.On("Bindings", ctx, fn)}
}

func (_c *MockBindingRepository_Bindings_Call) Run(run func(ctx context.Context, fn func(context.Context, *org.GcpOrgEntity, []iam.IamBinding) error)) *MockBindingRepository_Bindings_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(func(context.Context, *org.GcpOrgEntity, []iam.IamBinding) error))
	})
	return _c
}

func (_c *MockBindingRepository_Bindings_Call) Return(_a0 error) *MockBindingRepository_Bindings_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockBindingRepository_Bindings_Call) RunAndReturn(run func(context.Context, func(context.Context, *org.GcpOrgEntity, []iam.IamBinding) error) error) *MockBindingRepository_Bindings_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveBinding provides a mock function with given fields: ctx, binding
func (_m *MockBindingRepository) RemoveBinding(ctx context.Context, binding *iam.IamBinding) error {
	ret := _m.Called(ctx, binding)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *iam.IamBinding) error); ok {
		r0 = rf(ctx, binding)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockBindingRepository_RemoveBinding_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveBinding'
type MockBindingRepository_RemoveBinding_Call struct {
	*mock.Call
}

// RemoveBinding is a helper method to define mock.On call
//   - ctx context.Context
//   - binding *iam.IamBinding
func (_e *MockBindingRepository_Expecter) RemoveBinding(ctx interface{}, binding interface{}) *MockBindingRepository_RemoveBinding_Call {
	return &MockBindingRepository_RemoveBinding_Call{Call: _e.mock.On("RemoveBinding", ctx, binding)}
}

func (_c *MockBindingRepository_RemoveBinding_Call) Run(run func(ctx context.Context, binding *iam.IamBinding)) *MockBindingRepository_RemoveBinding_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*iam.IamBinding))
	})
	return _c
}

func (_c *MockBindingRepository_RemoveBinding_Call) Return(_a0 error) *MockBindingRepository_RemoveBinding_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockBindingRepository_RemoveBinding_Call) RunAndReturn(run func(context.Context, *iam.IamBinding) error) *MockBindingRepository_RemoveBinding_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockBindingRepository creates a new instance of MockBindingRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockBindingRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockBindingRepository {
	mock := &MockBindingRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
