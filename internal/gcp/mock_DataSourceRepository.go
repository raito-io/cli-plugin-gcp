// Code generated by mockery v2.36.1. DO NOT EDIT.

package gcp

import (
	context "context"

	org "github.com/raito-io/cli-plugin-gcp/internal/org"
	mock "github.com/stretchr/testify/mock"
)

// MockDataSourceRepository is an autogenerated mock type for the DataSourceRepository type
type MockDataSourceRepository struct {
	mock.Mock
}

type MockDataSourceRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDataSourceRepository) EXPECT() *MockDataSourceRepository_Expecter {
	return &MockDataSourceRepository_Expecter{mock: &_m.Mock}
}

// GetFolders provides a mock function with given fields: ctx, parentName, parent, fn
func (_m *MockDataSourceRepository) GetFolders(ctx context.Context, parentName string, parent *org.GcpOrgEntity, fn func(context.Context, *org.GcpOrgEntity) error) error {
	ret := _m.Called(ctx, parentName, parent, fn)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *org.GcpOrgEntity, func(context.Context, *org.GcpOrgEntity) error) error); ok {
		r0 = rf(ctx, parentName, parent, fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDataSourceRepository_GetFolders_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFolders'
type MockDataSourceRepository_GetFolders_Call struct {
	*mock.Call
}

// GetFolders is a helper method to define mock.On call
//   - ctx context.Context
//   - parentName string
//   - parent *org.GcpOrgEntity
//   - fn func(context.Context , *org.GcpOrgEntity) error
func (_e *MockDataSourceRepository_Expecter) GetFolders(ctx interface{}, parentName interface{}, parent interface{}, fn interface{}) *MockDataSourceRepository_GetFolders_Call {
	return &MockDataSourceRepository_GetFolders_Call{Call: _e.mock.On("GetFolders", ctx, parentName, parent, fn)}
}

func (_c *MockDataSourceRepository_GetFolders_Call) Run(run func(ctx context.Context, parentName string, parent *org.GcpOrgEntity, fn func(context.Context, *org.GcpOrgEntity) error)) *MockDataSourceRepository_GetFolders_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*org.GcpOrgEntity), args[3].(func(context.Context, *org.GcpOrgEntity) error))
	})
	return _c
}

func (_c *MockDataSourceRepository_GetFolders_Call) Return(_a0 error) *MockDataSourceRepository_GetFolders_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDataSourceRepository_GetFolders_Call) RunAndReturn(run func(context.Context, string, *org.GcpOrgEntity, func(context.Context, *org.GcpOrgEntity) error) error) *MockDataSourceRepository_GetFolders_Call {
	_c.Call.Return(run)
	return _c
}

// GetProjects provides a mock function with given fields: ctx, parentName, parent, fn
func (_m *MockDataSourceRepository) GetProjects(ctx context.Context, parentName string, parent *org.GcpOrgEntity, fn func(context.Context, *org.GcpOrgEntity) error) error {
	ret := _m.Called(ctx, parentName, parent, fn)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *org.GcpOrgEntity, func(context.Context, *org.GcpOrgEntity) error) error); ok {
		r0 = rf(ctx, parentName, parent, fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDataSourceRepository_GetProjects_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProjects'
type MockDataSourceRepository_GetProjects_Call struct {
	*mock.Call
}

// GetProjects is a helper method to define mock.On call
//   - ctx context.Context
//   - parentName string
//   - parent *org.GcpOrgEntity
//   - fn func(context.Context , *org.GcpOrgEntity) error
func (_e *MockDataSourceRepository_Expecter) GetProjects(ctx interface{}, parentName interface{}, parent interface{}, fn interface{}) *MockDataSourceRepository_GetProjects_Call {
	return &MockDataSourceRepository_GetProjects_Call{Call: _e.mock.On("GetProjects", ctx, parentName, parent, fn)}
}

func (_c *MockDataSourceRepository_GetProjects_Call) Run(run func(ctx context.Context, parentName string, parent *org.GcpOrgEntity, fn func(context.Context, *org.GcpOrgEntity) error)) *MockDataSourceRepository_GetProjects_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*org.GcpOrgEntity), args[3].(func(context.Context, *org.GcpOrgEntity) error))
	})
	return _c
}

func (_c *MockDataSourceRepository_GetProjects_Call) Return(_a0 error) *MockDataSourceRepository_GetProjects_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDataSourceRepository_GetProjects_Call) RunAndReturn(run func(context.Context, string, *org.GcpOrgEntity, func(context.Context, *org.GcpOrgEntity) error) error) *MockDataSourceRepository_GetProjects_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockDataSourceRepository creates a new instance of MockDataSourceRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDataSourceRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDataSourceRepository {
	mock := &MockDataSourceRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
