// Code generated by mockery v2.36.1. DO NOT EDIT.

package gcp

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockDataObjectRepository is an autogenerated mock type for the DataObjectRepository type
type MockDataObjectRepository struct {
	mock.Mock
}

type MockDataObjectRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDataObjectRepository) EXPECT() *MockDataObjectRepository_Expecter {
	return &MockDataObjectRepository_Expecter{mock: &_m.Mock}
}

// UserAndGroups provides a mock function with given fields: ctx, userFn, groupFn
func (_m *MockDataObjectRepository) UserAndGroups(ctx context.Context, userFn func(context.Context, string) error, groupFn func(context.Context, string) error) error {
	ret := _m.Called(ctx, userFn, groupFn)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, func(context.Context, string) error, func(context.Context, string) error) error); ok {
		r0 = rf(ctx, userFn, groupFn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDataObjectRepository_UserAndGroups_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UserAndGroups'
type MockDataObjectRepository_UserAndGroups_Call struct {
	*mock.Call
}

// UserAndGroups is a helper method to define mock.On call
//   - ctx context.Context
//   - userFn func(context.Context , string) error
//   - groupFn func(context.Context , string) error
func (_e *MockDataObjectRepository_Expecter) UserAndGroups(ctx interface{}, userFn interface{}, groupFn interface{}) *MockDataObjectRepository_UserAndGroups_Call {
	return &MockDataObjectRepository_UserAndGroups_Call{Call: _e.mock.On("UserAndGroups", ctx, userFn, groupFn)}
}

func (_c *MockDataObjectRepository_UserAndGroups_Call) Run(run func(ctx context.Context, userFn func(context.Context, string) error, groupFn func(context.Context, string) error)) *MockDataObjectRepository_UserAndGroups_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(func(context.Context, string) error), args[2].(func(context.Context, string) error))
	})
	return _c
}

func (_c *MockDataObjectRepository_UserAndGroups_Call) Return(_a0 error) *MockDataObjectRepository_UserAndGroups_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDataObjectRepository_UserAndGroups_Call) RunAndReturn(run func(context.Context, func(context.Context, string) error, func(context.Context, string) error) error) *MockDataObjectRepository_UserAndGroups_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockDataObjectRepository creates a new instance of MockDataObjectRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDataObjectRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDataObjectRepository {
	mock := &MockDataObjectRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
