// Code generated by mockery v2.36.1. DO NOT EDIT.

package bigquery

import (
	context "context"

	config "github.com/raito-io/cli/base/util/config"

	mock "github.com/stretchr/testify/mock"
)

// mockDataUsageRepository is an autogenerated mock type for the dataUsageRepository type
type mockDataUsageRepository struct {
	mock.Mock
}

type mockDataUsageRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *mockDataUsageRepository) EXPECT() *mockDataUsageRepository_Expecter {
	return &mockDataUsageRepository_Expecter{mock: &_m.Mock}
}

// GetDataUsage provides a mock function with given fields: ctx, configMap
func (_m *mockDataUsageRepository) GetDataUsage(ctx context.Context, configMap *config.ConfigMap) ([]BQInformationSchemaEntity, error) {
	ret := _m.Called(ctx, configMap)

	var r0 []BQInformationSchemaEntity
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *config.ConfigMap) ([]BQInformationSchemaEntity, error)); ok {
		return rf(ctx, configMap)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *config.ConfigMap) []BQInformationSchemaEntity); ok {
		r0 = rf(ctx, configMap)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]BQInformationSchemaEntity)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *config.ConfigMap) error); ok {
		r1 = rf(ctx, configMap)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockDataUsageRepository_GetDataUsage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDataUsage'
type mockDataUsageRepository_GetDataUsage_Call struct {
	*mock.Call
}

// GetDataUsage is a helper method to define mock.On call
//   - ctx context.Context
//   - configMap *config.ConfigMap
func (_e *mockDataUsageRepository_Expecter) GetDataUsage(ctx interface{}, configMap interface{}) *mockDataUsageRepository_GetDataUsage_Call {
	return &mockDataUsageRepository_GetDataUsage_Call{Call: _e.mock.On("GetDataUsage", ctx, configMap)}
}

func (_c *mockDataUsageRepository_GetDataUsage_Call) Run(run func(ctx context.Context, configMap *config.ConfigMap)) *mockDataUsageRepository_GetDataUsage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*config.ConfigMap))
	})
	return _c
}

func (_c *mockDataUsageRepository_GetDataUsage_Call) Return(_a0 []BQInformationSchemaEntity, _a1 error) *mockDataUsageRepository_GetDataUsage_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockDataUsageRepository_GetDataUsage_Call) RunAndReturn(run func(context.Context, *config.ConfigMap) ([]BQInformationSchemaEntity, error)) *mockDataUsageRepository_GetDataUsage_Call {
	_c.Call.Return(run)
	return _c
}

// newMockDataUsageRepository creates a new instance of mockDataUsageRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockDataUsageRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockDataUsageRepository {
	mock := &mockDataUsageRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
