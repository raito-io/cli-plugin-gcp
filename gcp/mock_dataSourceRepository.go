// Code generated by mockery v2.20.0. DO NOT EDIT.

package gcp

import (
	context "context"

	config "github.com/raito-io/cli/base/util/config"

	mock "github.com/stretchr/testify/mock"

	org "github.com/raito-io/cli-plugin-gcp/gcp/org"
)

// mockDataSourceRepository is an autogenerated mock type for the dataSourceRepository type
type mockDataSourceRepository struct {
	mock.Mock
}

type mockDataSourceRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *mockDataSourceRepository) EXPECT() *mockDataSourceRepository_Expecter {
	return &mockDataSourceRepository_Expecter{mock: &_m.Mock}
}

// GetFolders provides a mock function with given fields: ctx, configMap
func (_m *mockDataSourceRepository) GetFolders(ctx context.Context, configMap *config.ConfigMap) ([]org.GcpOrgEntity, error) {
	ret := _m.Called(ctx, configMap)

	var r0 []org.GcpOrgEntity
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *config.ConfigMap) ([]org.GcpOrgEntity, error)); ok {
		return rf(ctx, configMap)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *config.ConfigMap) []org.GcpOrgEntity); ok {
		r0 = rf(ctx, configMap)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]org.GcpOrgEntity)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *config.ConfigMap) error); ok {
		r1 = rf(ctx, configMap)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockDataSourceRepository_GetFolders_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFolders'
type mockDataSourceRepository_GetFolders_Call struct {
	*mock.Call
}

// GetFolders is a helper method to define mock.On call
//   - ctx context.Context
//   - configMap *config.ConfigMap
func (_e *mockDataSourceRepository_Expecter) GetFolders(ctx interface{}, configMap interface{}) *mockDataSourceRepository_GetFolders_Call {
	return &mockDataSourceRepository_GetFolders_Call{Call: _e.mock.On("GetFolders", ctx, configMap)}
}

func (_c *mockDataSourceRepository_GetFolders_Call) Run(run func(ctx context.Context, configMap *config.ConfigMap)) *mockDataSourceRepository_GetFolders_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*config.ConfigMap))
	})
	return _c
}

func (_c *mockDataSourceRepository_GetFolders_Call) Return(_a0 []org.GcpOrgEntity, _a1 error) *mockDataSourceRepository_GetFolders_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockDataSourceRepository_GetFolders_Call) RunAndReturn(run func(context.Context, *config.ConfigMap) ([]org.GcpOrgEntity, error)) *mockDataSourceRepository_GetFolders_Call {
	_c.Call.Return(run)
	return _c
}

// GetProjects provides a mock function with given fields: ctx, configMap
func (_m *mockDataSourceRepository) GetProjects(ctx context.Context, configMap *config.ConfigMap) ([]org.GcpOrgEntity, error) {
	ret := _m.Called(ctx, configMap)

	var r0 []org.GcpOrgEntity
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *config.ConfigMap) ([]org.GcpOrgEntity, error)); ok {
		return rf(ctx, configMap)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *config.ConfigMap) []org.GcpOrgEntity); ok {
		r0 = rf(ctx, configMap)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]org.GcpOrgEntity)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *config.ConfigMap) error); ok {
		r1 = rf(ctx, configMap)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockDataSourceRepository_GetProjects_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProjects'
type mockDataSourceRepository_GetProjects_Call struct {
	*mock.Call
}

// GetProjects is a helper method to define mock.On call
//   - ctx context.Context
//   - configMap *config.ConfigMap
func (_e *mockDataSourceRepository_Expecter) GetProjects(ctx interface{}, configMap interface{}) *mockDataSourceRepository_GetProjects_Call {
	return &mockDataSourceRepository_GetProjects_Call{Call: _e.mock.On("GetProjects", ctx, configMap)}
}

func (_c *mockDataSourceRepository_GetProjects_Call) Run(run func(ctx context.Context, configMap *config.ConfigMap)) *mockDataSourceRepository_GetProjects_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*config.ConfigMap))
	})
	return _c
}

func (_c *mockDataSourceRepository_GetProjects_Call) Return(_a0 []org.GcpOrgEntity, _a1 error) *mockDataSourceRepository_GetProjects_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockDataSourceRepository_GetProjects_Call) RunAndReturn(run func(context.Context, *config.ConfigMap) ([]org.GcpOrgEntity, error)) *mockDataSourceRepository_GetProjects_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTnewMockDataSourceRepository interface {
	mock.TestingT
	Cleanup(func())
}

// newMockDataSourceRepository creates a new instance of mockDataSourceRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func newMockDataSourceRepository(t mockConstructorTestingTnewMockDataSourceRepository) *mockDataSourceRepository {
	mock := &mockDataSourceRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
