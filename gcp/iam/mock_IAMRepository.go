// Code generated by mockery v2.21.1. DO NOT EDIT.

package iam

import (
	context "context"

	config "github.com/raito-io/cli/base/util/config"

	mock "github.com/stretchr/testify/mock"
)

// MockIAMRepository is an autogenerated mock type for the IAMRepository type
type MockIAMRepository struct {
	mock.Mock
}

type MockIAMRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIAMRepository) EXPECT() *MockIAMRepository_Expecter {
	return &MockIAMRepository_Expecter{mock: &_m.Mock}
}

// AddBinding provides a mock function with given fields: ctx, configMap, id, member, role
func (_m *MockIAMRepository) AddBinding(ctx context.Context, configMap *config.ConfigMap, id string, member string, role string) error {
	ret := _m.Called(ctx, configMap, id, member, role)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *config.ConfigMap, string, string, string) error); ok {
		r0 = rf(ctx, configMap, id, member, role)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockIAMRepository_AddBinding_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddBinding'
type MockIAMRepository_AddBinding_Call struct {
	*mock.Call
}

// AddBinding is a helper method to define mock.On call
//   - ctx context.Context
//   - configMap *config.ConfigMap
//   - id string
//   - member string
//   - role string
func (_e *MockIAMRepository_Expecter) AddBinding(ctx interface{}, configMap interface{}, id interface{}, member interface{}, role interface{}) *MockIAMRepository_AddBinding_Call {
	return &MockIAMRepository_AddBinding_Call{Call: _e.mock.On("AddBinding", ctx, configMap, id, member, role)}
}

func (_c *MockIAMRepository_AddBinding_Call) Run(run func(ctx context.Context, configMap *config.ConfigMap, id string, member string, role string)) *MockIAMRepository_AddBinding_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*config.ConfigMap), args[2].(string), args[3].(string), args[4].(string))
	})
	return _c
}

func (_c *MockIAMRepository_AddBinding_Call) Return(_a0 error) *MockIAMRepository_AddBinding_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIAMRepository_AddBinding_Call) RunAndReturn(run func(context.Context, *config.ConfigMap, string, string, string) error) *MockIAMRepository_AddBinding_Call {
	_c.Call.Return(run)
	return _c
}

// GetGroups provides a mock function with given fields: ctx, configMap, id
func (_m *MockIAMRepository) GetGroups(ctx context.Context, configMap *config.ConfigMap, id string) ([]GroupEntity, error) {
	ret := _m.Called(ctx, configMap, id)

	var r0 []GroupEntity
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *config.ConfigMap, string) ([]GroupEntity, error)); ok {
		return rf(ctx, configMap, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *config.ConfigMap, string) []GroupEntity); ok {
		r0 = rf(ctx, configMap, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]GroupEntity)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *config.ConfigMap, string) error); ok {
		r1 = rf(ctx, configMap, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMRepository_GetGroups_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGroups'
type MockIAMRepository_GetGroups_Call struct {
	*mock.Call
}

// GetGroups is a helper method to define mock.On call
//   - ctx context.Context
//   - configMap *config.ConfigMap
//   - id string
func (_e *MockIAMRepository_Expecter) GetGroups(ctx interface{}, configMap interface{}, id interface{}) *MockIAMRepository_GetGroups_Call {
	return &MockIAMRepository_GetGroups_Call{Call: _e.mock.On("GetGroups", ctx, configMap, id)}
}

func (_c *MockIAMRepository_GetGroups_Call) Run(run func(ctx context.Context, configMap *config.ConfigMap, id string)) *MockIAMRepository_GetGroups_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*config.ConfigMap), args[2].(string))
	})
	return _c
}

func (_c *MockIAMRepository_GetGroups_Call) Return(_a0 []GroupEntity, _a1 error) *MockIAMRepository_GetGroups_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMRepository_GetGroups_Call) RunAndReturn(run func(context.Context, *config.ConfigMap, string) ([]GroupEntity, error)) *MockIAMRepository_GetGroups_Call {
	_c.Call.Return(run)
	return _c
}

// GetIamPolicy provides a mock function with given fields: ctx, configMap, id
func (_m *MockIAMRepository) GetIamPolicy(ctx context.Context, configMap *config.ConfigMap, id string) (IAMPolicyContainer, error) {
	ret := _m.Called(ctx, configMap, id)

	var r0 IAMPolicyContainer
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *config.ConfigMap, string) (IAMPolicyContainer, error)); ok {
		return rf(ctx, configMap, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *config.ConfigMap, string) IAMPolicyContainer); ok {
		r0 = rf(ctx, configMap, id)
	} else {
		r0 = ret.Get(0).(IAMPolicyContainer)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *config.ConfigMap, string) error); ok {
		r1 = rf(ctx, configMap, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMRepository_GetIamPolicy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetIamPolicy'
type MockIAMRepository_GetIamPolicy_Call struct {
	*mock.Call
}

// GetIamPolicy is a helper method to define mock.On call
//   - ctx context.Context
//   - configMap *config.ConfigMap
//   - id string
func (_e *MockIAMRepository_Expecter) GetIamPolicy(ctx interface{}, configMap interface{}, id interface{}) *MockIAMRepository_GetIamPolicy_Call {
	return &MockIAMRepository_GetIamPolicy_Call{Call: _e.mock.On("GetIamPolicy", ctx, configMap, id)}
}

func (_c *MockIAMRepository_GetIamPolicy_Call) Run(run func(ctx context.Context, configMap *config.ConfigMap, id string)) *MockIAMRepository_GetIamPolicy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*config.ConfigMap), args[2].(string))
	})
	return _c
}

func (_c *MockIAMRepository_GetIamPolicy_Call) Return(_a0 IAMPolicyContainer, _a1 error) *MockIAMRepository_GetIamPolicy_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMRepository_GetIamPolicy_Call) RunAndReturn(run func(context.Context, *config.ConfigMap, string) (IAMPolicyContainer, error)) *MockIAMRepository_GetIamPolicy_Call {
	_c.Call.Return(run)
	return _c
}

// GetServiceAccounts provides a mock function with given fields: ctx, configMap, id
func (_m *MockIAMRepository) GetServiceAccounts(ctx context.Context, configMap *config.ConfigMap, id string) ([]UserEntity, error) {
	ret := _m.Called(ctx, configMap, id)

	var r0 []UserEntity
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *config.ConfigMap, string) ([]UserEntity, error)); ok {
		return rf(ctx, configMap, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *config.ConfigMap, string) []UserEntity); ok {
		r0 = rf(ctx, configMap, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]UserEntity)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *config.ConfigMap, string) error); ok {
		r1 = rf(ctx, configMap, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMRepository_GetServiceAccounts_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetServiceAccounts'
type MockIAMRepository_GetServiceAccounts_Call struct {
	*mock.Call
}

// GetServiceAccounts is a helper method to define mock.On call
//   - ctx context.Context
//   - configMap *config.ConfigMap
//   - id string
func (_e *MockIAMRepository_Expecter) GetServiceAccounts(ctx interface{}, configMap interface{}, id interface{}) *MockIAMRepository_GetServiceAccounts_Call {
	return &MockIAMRepository_GetServiceAccounts_Call{Call: _e.mock.On("GetServiceAccounts", ctx, configMap, id)}
}

func (_c *MockIAMRepository_GetServiceAccounts_Call) Run(run func(ctx context.Context, configMap *config.ConfigMap, id string)) *MockIAMRepository_GetServiceAccounts_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*config.ConfigMap), args[2].(string))
	})
	return _c
}

func (_c *MockIAMRepository_GetServiceAccounts_Call) Return(_a0 []UserEntity, _a1 error) *MockIAMRepository_GetServiceAccounts_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMRepository_GetServiceAccounts_Call) RunAndReturn(run func(context.Context, *config.ConfigMap, string) ([]UserEntity, error)) *MockIAMRepository_GetServiceAccounts_Call {
	_c.Call.Return(run)
	return _c
}

// GetUsers provides a mock function with given fields: ctx, configMap, id
func (_m *MockIAMRepository) GetUsers(ctx context.Context, configMap *config.ConfigMap, id string) ([]UserEntity, error) {
	ret := _m.Called(ctx, configMap, id)

	var r0 []UserEntity
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *config.ConfigMap, string) ([]UserEntity, error)); ok {
		return rf(ctx, configMap, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *config.ConfigMap, string) []UserEntity); ok {
		r0 = rf(ctx, configMap, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]UserEntity)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *config.ConfigMap, string) error); ok {
		r1 = rf(ctx, configMap, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMRepository_GetUsers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUsers'
type MockIAMRepository_GetUsers_Call struct {
	*mock.Call
}

// GetUsers is a helper method to define mock.On call
//   - ctx context.Context
//   - configMap *config.ConfigMap
//   - id string
func (_e *MockIAMRepository_Expecter) GetUsers(ctx interface{}, configMap interface{}, id interface{}) *MockIAMRepository_GetUsers_Call {
	return &MockIAMRepository_GetUsers_Call{Call: _e.mock.On("GetUsers", ctx, configMap, id)}
}

func (_c *MockIAMRepository_GetUsers_Call) Run(run func(ctx context.Context, configMap *config.ConfigMap, id string)) *MockIAMRepository_GetUsers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*config.ConfigMap), args[2].(string))
	})
	return _c
}

func (_c *MockIAMRepository_GetUsers_Call) Return(_a0 []UserEntity, _a1 error) *MockIAMRepository_GetUsers_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMRepository_GetUsers_Call) RunAndReturn(run func(context.Context, *config.ConfigMap, string) ([]UserEntity, error)) *MockIAMRepository_GetUsers_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveBinding provides a mock function with given fields: ctx, configMap, id, member, role
func (_m *MockIAMRepository) RemoveBinding(ctx context.Context, configMap *config.ConfigMap, id string, member string, role string) error {
	ret := _m.Called(ctx, configMap, id, member, role)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *config.ConfigMap, string, string, string) error); ok {
		r0 = rf(ctx, configMap, id, member, role)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockIAMRepository_RemoveBinding_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveBinding'
type MockIAMRepository_RemoveBinding_Call struct {
	*mock.Call
}

// RemoveBinding is a helper method to define mock.On call
//   - ctx context.Context
//   - configMap *config.ConfigMap
//   - id string
//   - member string
//   - role string
func (_e *MockIAMRepository_Expecter) RemoveBinding(ctx interface{}, configMap interface{}, id interface{}, member interface{}, role interface{}) *MockIAMRepository_RemoveBinding_Call {
	return &MockIAMRepository_RemoveBinding_Call{Call: _e.mock.On("RemoveBinding", ctx, configMap, id, member, role)}
}

func (_c *MockIAMRepository_RemoveBinding_Call) Run(run func(ctx context.Context, configMap *config.ConfigMap, id string, member string, role string)) *MockIAMRepository_RemoveBinding_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*config.ConfigMap), args[2].(string), args[3].(string), args[4].(string))
	})
	return _c
}

func (_c *MockIAMRepository_RemoveBinding_Call) Return(_a0 error) *MockIAMRepository_RemoveBinding_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIAMRepository_RemoveBinding_Call) RunAndReturn(run func(context.Context, *config.ConfigMap, string, string, string) error) *MockIAMRepository_RemoveBinding_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewMockIAMRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockIAMRepository creates a new instance of MockIAMRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockIAMRepository(t mockConstructorTestingTNewMockIAMRepository) *MockIAMRepository {
	mock := &MockIAMRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
